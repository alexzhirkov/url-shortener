// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/alexzhirkov/url-shortener/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// urlRepository is an autogenerated mock type for the urlRepository type
type urlRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *urlRepository) Count() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUrl provides a mock function with given fields: ctx, shorturl
func (_m *urlRepository) CreateUrl(ctx context.Context, shorturl *domain.ShortUrl) error {
	ret := _m.Called(ctx, shorturl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ShortUrl) error); ok {
		r0 = rf(ctx, shorturl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUrl provides a mock function with given fields: ctx, alias
func (_m *urlRepository) GetUrl(ctx context.Context, alias string) (*domain.ShortUrl, error) {
	ret := _m.Called(ctx, alias)

	var r0 *domain.ShortUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ShortUrl, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ShortUrl); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ShortUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewUrlRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newUrlRepository creates a new instance of urlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUrlRepository(t mockConstructorTestingTnewUrlRepository) *urlRepository {
	mock := &urlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
